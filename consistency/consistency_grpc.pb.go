// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: consistency.proto

package consistency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsistencyClient is the client API for Consistency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsistencyClient interface {
	Sendconfigure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
}

type consistencyClient struct {
	cc grpc.ClientConnInterface
}

func NewConsistencyClient(cc grpc.ClientConnInterface) ConsistencyClient {
	return &consistencyClient{cc}
}

func (c *consistencyClient) Sendconfigure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, "/consistency.consistency/sendconfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsistencyServer is the server API for Consistency service.
// All implementations must embed UnimplementedConsistencyServer
// for forward compatibility
type ConsistencyServer interface {
	Sendconfigure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	mustEmbedUnimplementedConsistencyServer()
}

// UnimplementedConsistencyServer must be embedded to have forward compatible implementations.
type UnimplementedConsistencyServer struct {
}

func (UnimplementedConsistencyServer) Sendconfigure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sendconfigure not implemented")
}
func (UnimplementedConsistencyServer) mustEmbedUnimplementedConsistencyServer() {}

// UnsafeConsistencyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsistencyServer will
// result in compilation errors.
type UnsafeConsistencyServer interface {
	mustEmbedUnimplementedConsistencyServer()
}

func RegisterConsistencyServer(s grpc.ServiceRegistrar, srv ConsistencyServer) {
	s.RegisterService(&Consistency_ServiceDesc, srv)
}

func _Consistency_Sendconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistencyServer).Sendconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consistency.consistency/sendconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistencyServer).Sendconfigure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Consistency_ServiceDesc is the grpc.ServiceDesc for Consistency service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consistency_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consistency.consistency",
	HandlerType: (*ConsistencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendconfigure",
			Handler:    _Consistency_Sendconfigure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consistency.proto",
}
